library IEEE;
use IEEE.std_logic_1164.all;

-----------------------------------------------------

entity mux32 is
   PORT
   (
      r0, r1, r2, r3, r4, r5, r6, r7, r8, r9,
		r10, r11, r12, r13, r14, r15, hi, lo, zhi, zlo,
		pc, mdr: in std_logic_vector(31 downto 0);
		sel: in std_logic_vector(4 downto 0);
		muxout: out std_logic_vector(31 downto 0);
   );
END entity;

-----------------------------------------------------

architecture logic of mux32 is

begin

muxout <=	r0		when (sel = "00000")
		else	r1		when (sel = "00001")
		else	r2		when (sel = "00010")
		else	r3		when (sel = "00011")
		else	r4		when (sel = "00100")
		else	r5		when (sel = "00101")
		else	r6		when (sel = "00110")
		else	r7		when (sel = "00111")
		else	r8		when (sel = "01000")
		else	r9		when (sel = "01001")
		else	r10	when (sel = "01010")
		else	r11	when (sel = "01011")
		else	r12	when (sel = "01100")
		else	r13	when (sel = "01101")
		else	r14	when (sel = "01110")
		else	r15	when (sel = "01111")
		else	hi 	when (sel = "10000")
		else	lo		when (sel = "10001")
		else	zhi	when (sel = "10010")
		else	zlo	when (sel = "10011")
		else	pc		when (sel = "10100")
		else	mdr	when (sel = "10101")
		else	(others => '0')	when (sel = "10110")
		else	(others => '0')	when (sel = "10111")
		else	(others => '0')	when (sel = "11000")
		else	(others => '0')	when (sel = "11001")
		else	(others => '0')	when (sel = "11010")
		else	(others => '0')	when (sel = "11011")
		else	(others => '0')	when (sel = "11100")
		else	(others => '0')	when (sel = "11101")
		else	(others => '0')	when (sel = "11110")
		else	(others => '0')	when (sel = "11111");
		
		
end architecture;